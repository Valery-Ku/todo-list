<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ToDo List</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .task { margin: 10px 0; padding: 10px; border: 1px solid #ccc; }
        .completed { text-decoration: line-through; }
        form { margin-bottom: 20px; }
    </style>
</head>
<body>
    <h1>ToDo List</h1>
    <!-- Форма для добавления задачи -->
    <form id="add-task-form">
        <input type="text" id="task-text" placeholder="Введите новую задачу" required>
        <button type="submit">Добавить</button>
    </form>
    
    <ul id="task-list">
        <% tasks.forEach(task => { %>
            <li class="task <%= task.completed ? 'completed' : '' %>" data-id="<%= task._id %>">
                <span><%= task.text %></span>
                <button onclick="toggleComplete('<%= task._id %>')">✓</button>
                <button onclick="editTask('<%= task._id %>')">Редактировать</button>
                <button onclick="deleteTask('<%= task._id %>')">Удалить</button>
            </li>
        <% }); %>
    </ul>

    <script>
        // Функция для добавления задачи (AJAX)
        document.getElementById('add-task-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const text = document.getElementById('task-text').value;
            const response = await fetch('/api/tasks', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text })
            });
            if (response.ok) {
                const newTask = await response.json();
                addTaskToDOM(newTask);
                document.getElementById('task-text').value = '';
            }
        });

        // Функция для переключения статуса (обновление)
        async function toggleComplete(id) {
            const taskElement = document.querySelector(`[data-id="${id}"]`);
            const currentCompleted = taskElement.classList.contains('completed');
            const response = await fetch(`/api/tasks/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ completed: !currentCompleted })
            });
            if (response.ok) {
                taskElement.classList.toggle('completed');
            }
        }

        // Функция для редактирования
        async function editTask(id) {
            const newText = prompt('Введите новый текст задачи:');
            if (newText) {
                const response = await fetch(`/api/tasks/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: newText })
                });
                if (response.ok) {
                    const updatedTask = await response.json();
                    updateTaskInDOM(updatedTask); 
                }
            }
        }

        // Функция для удаления
        async function deleteTask(id) {
            const response = await fetch(`/api/tasks/${id}`, { method: 'DELETE' });
            if (response.ok) {
                document.querySelector(`[data-id="${id}"]`).remove();
            }
        }

        // Вспомогательные функции для обновления DOM
        function addTaskToDOM(task) {
            const ul = document.getElementById('task-list');
            const li = document.createElement('li');
            li.className = 'task';
            li.setAttribute('data-id', task._id);
            li.innerHTML = `<span>${task.text}</span>
                            <button onclick="toggleComplete('${task._id}')">✓</button>
                            <button onclick="editTask('${task._id}')">Редактировать</button>
                            <button onclick="deleteTask('${task._id}')">Удалить</button>`;
            ul.appendChild(li);
        }

        function updateTaskInDOM(task) {
            const li = document.querySelector(`[data-id="${task._id}"]`);
            li.querySelector('span').textContent = task.text;
            li.classList.toggle('completed', task.completed);
        }
    </script>
</body>
</html>
